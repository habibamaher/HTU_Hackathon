# agents/gemini_agent.py - QUERY-AWARE VERSION

import google.generativeai as genai
import os
from dotenv import load_dotenv
from .utils import TrendResult

load_dotenv()

# Configure Gemini API
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)

def generate_sports_trend(query="latest sports news"):
    """
    Generate a sports trend using Gemini AI based on user query.
    Now accepts query parameter for personalized responses!
    """
    try:
        if not GOOGLE_API_KEY:
            print("⚠️ GOOGLE_API_KEY not found in .env file")
            return TrendResult(
                title="Configuration Error",
                summary="Gemini API key not configured. Please add GOOGLE_API_KEY to your .env file.",
                impact="AI generation unavailable"
            )
        
        # Initialize Gemini model
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        # Create a prompt based on user's query
        prompt = f"""Generate a realistic sports news headline and summary based on this query: "{query}"

Please provide:
1. A catchy, realistic sports headline (10-15 words)
2. A brief 2-3 sentence summary of the news
3. The potential impact or significance (1 sentence)

Make it sound like real sports journalism. Focus on the sport mentioned in the query if possible.
Keep it concise and factual-sounding."""

        # Generate content
        response = model.generate_content(prompt)
        
        if response and response.text:
            text = response.text.strip()
            
            # Parse the response (simple parsing)
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            
            if len(lines) >= 3:
                title = lines[0].replace('**', '').replace('*', '').strip()
                summary = ' '.join(lines[1:-1])
                impact = lines[-1]
            else:
                title = f"Sports Update: {query}"
                summary = text
                impact = "Generated by AI"
            
            return TrendResult(
                title=title,
                summary=summary,
                impact=f"AI Generated - {impact}"
            )
        else:
            return TrendResult(
                title="AI Generation Error",
                summary="Unable to generate sports trend at this time.",
                impact="Please try again later"
            )
            
    except Exception as e:
        print(f"❌ Gemini error: {str(e)}")
        return TrendResult(
            title="Error",
            summary=f"AI generation failed: {str(e)}",
            impact="Gemini API error"
        )